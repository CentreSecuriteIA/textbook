IGNORE THIS FILE FOR NOW, just testing out section numbering



import os
import re
from pathlib import Path
import shutil
import math
import zipfile

def sanitize_filename(filename):
    """Remove invalid characters for filenames and replace spaces with hyphens."""
    filename = re.sub(r'[\\/*?:"<>|]', "", filename)
    filename = filename.replace(" ", '-')
    return filename

def read_file(file_path):
    """Read the contents of a file and return as a string."""
    with open(file_path, 'r') as file:
        return file.read()

def replace_snippets(big_file: str, snippets_directory):
    """Replace occurrences of file names in the big file with the contents of those files."""
    snippet_files = os.listdir(snippets_directory)
    for snippet_file in snippet_files:
        if snippet_file in big_file:
            print(f"{snippet_file} will be included")
            snippet_file_path = os.path.join(snippets_directory, snippet_file)
            snippet_content = read_file(snippet_file_path)
            big_file = big_file.replace(snippet_file, snippet_content)
    return big_file

def replace_tab_sections(body: str):
    """Replace lines between <tab> and </tab> with tabs in the final markdown."""
    while True:
        tab_pattern = re.compile(r'<tab>([^<]*?)</tab>', re.DOTALL)
        match = tab_pattern.search(body)
        if not match:
            break
        tab_content = match.group(1)
        tab_replacement = '\n'.join(['\t' + line for line in tab_content.splitlines()])
        body = body[:match.start()] + tab_replacement[2:] + body[match.end():]
    return body

def process(body: str):
    """Process the body of the markdown by replacing special markers and including snippets."""
    body = body.replace("$$$$", "    ")
    body = replace_snippets(body, "include_snippets")
    body = replace_tab_sections(body)
    return body

def calculate_reading_time(text):
    """Calculate estimated reading time for a given text."""
    words_per_minute = 200
    words = len(text.split())
    reading_time = math.ceil(words / words_per_minute)
    return f"âŒ› Estimated Reading Time: {reading_time} minutes. ({words} words)"

def split_and_number_sections(content, chapter_number):
    """Split content into numbered sections and handle appendices separately."""
    section_pattern = re.compile(r'(#+)\s*(.+)')
    sections = []
    current_section = []
    section_counter = 0
    subsection_counter = 0
    subsubsection_counter = 0
    appendix_counter = 0
    in_appendix = False
    overview_section = True
    toc_found = False
    toc_ended = False
    overview_content = []

    lines = content.splitlines()
    i = 0
    while i < len(lines):
        line = lines[i]
        match = section_pattern.match(line)
        
        if overview_section:
            if match and match.group(1) == '#':
                overview_section = False
                current_section = []
                i += 1
                while i < len(lines) and not section_pattern.match(lines[i]):
                    current_section.append(lines[i])
                    i += 1
                overview_content = current_section
                current_section = []
            else:
                if "Table of Contents" in line or toc_found:
                    toc_found = True
                    if line.strip() == "":
                        toc_ended = True
                    if toc_ended:
                        continue
                i += 1
            continue
        
        if match:
            header_level = len(match.group(1))
            title = match.group(2).strip()

            if header_level == 1 and "Appendix" in title:
                title = re.sub(r'Appendix \d+:\s*', '', title)
                if current_section:
                    sections.append(current_section)
                in_appendix = True
                appendix_counter += 1
                section_counter = appendix_counter
                subsection_counter = 0
                subsubsection_counter = 0
                current_section = [f"# A{section_counter} {title}"]
            elif header_level == 1:
                if current_section:
                    sections.append(current_section)
                section_counter += 1
                current_section = [f"# {chapter_number}.{section_counter} {title}"]
                subsection_counter = 0
                subsubsection_counter = 0
                in_appendix = False
            elif header_level == 2:
                subsection_counter += 1
                subsubsection_counter = 0
                if in_appendix:
                    current_section.append(f"## A{section_counter}.{subsection_counter} {title}")
                else:
                    current_section.append(f"## {chapter_number}.{section_counter}.{subsection_counter} {title}")
            elif header_level == 3:
                subsubsection_counter += 1
                if in_appendix:
                    current_section.append(f"### A{section_counter}.{subsection_counter}.{subsubsection_counter} {title}")
                else:
                    current_section.append(f"### {chapter_number}.{section_counter}.{subsection_counter}.{subsubsection_counter} {title}")
            i += 1
        else:
            if current_section:
                current_section.append(line)
            i += 1
    
    if current_section:
        sections.append(current_section)
    
    return ['\n'.join(section) for section in sections], '\n'.join(overview_content)

def extract_zip(zip_path, extract_to):
    """Extract the zip file to the specified directory."""
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(extract_to)

def split_markdown(zip_path):
    extract_to = Path("extracted")
    extract_zip(zip_path, extract_to)
    
    file_path = extract_to / "Output.md"
    
    if not file_path.exists():
        raise FileNotFoundError("Output.md file not found in the extracted contents.")
    
    with open(file_path, 'r', encoding='utf-8') as file:
        content = file.read()

    first_line = content.split('\n', 1)[0]
    chapter_info = re.match(r'#\s*Chapter\s*(\d+)\s*-\s*(.+)', first_line)
    if chapter_info:
        chapter_number = chapter_info.group(1)
        chapter_title = chapter_info.group(2).strip()
    else:
        raise ValueError("The first line of the document does not match the expected format '# Chapter X - Title'")

    chapter_folder_name = f"{chapter_number.zfill(2)} - {chapter_title}"
    
    numbered_sections, overview_content = split_and_number_sections(content, chapter_number)
    
    section_files_created = set()
    
    chapter_path = Path("docs/Chapters") / chapter_folder_name
    chapter_path.mkdir(parents=True, exist_ok=True)
    
    # Create README.md for the overview section
    with open(chapter_path / "README.md", 'w', encoding='utf-8') as readme_file:
        readme_file.write('\n'.join(overview_content))
    print("Created README.md.")
    
    for i, section in enumerate(numbered_sections):
        lines = section.split('\n')
        title_line = lines[0]
        title = title_line.split(' ', 2)[2]
        body = '\n'.join(lines[1:])
        reading_time = calculate_reading_time(body)
        body = process(body)
        sanitized_title = sanitize_filename(title)
        output_filename = f"{sanitized_title}.md" if title_line.startswith("# A") else f"{chapter_number}.{i + 1} - {sanitized_title}.md"
        
        if output_filename in section_files_created:
            output_filename = f"{chapter_number}.{i + 1} - {sanitized_title}.md"
        
        section_files_created.add(output_filename)
        
        with open(chapter_path / output_filename, 'w', encoding='utf-8') as output_file:
            output_file.write(f"{title_line}\n\n{reading_time}\n\n{body}")
        print(f"Created {output_filename}.")
    
    images_source = extract_to / "Images"
    if images_source.exists() and images_source.is_dir():
        shutil.copytree(images_source, chapter_path / "Images", dirs_exist_ok=True)

    shutil.rmtree(extract_to)

# Example usage
split_markdown('/home/markov/downloads/textbook/Chapter 1 - Capabilities - [Commentable]_05-06-2024_00 03 57.zip')
print("Don't forget to check the result of the formatting and then commit")
